{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","SetMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","fetchTrending","fetchNetflixOrigionals","fetchTopRated","fetchActionMovies","fetchComedymovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","setMovie","coverImg","Math","floor","random","length","str","n","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleshow","window","addEventListener","scrollY","removeEventListener","href","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+TAOeA,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,iC,iCC2DEC,EAvDH,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,WAAgB,EACfC,mBAAS,IADM,mBACpCC,EADoC,KAC5BC,EAD4B,OAEPF,mBAAS,IAFF,mBAEpCG,EAFoC,KAExBC,EAFwB,KAI3CC,qBAAU,YAES,uCAAG,4BAAAC,EAAA,sEACQb,EAAMc,IAAIT,GADlB,cACRU,EADQ,OAGdN,EAAUM,EAAQC,KAAKC,SAHT,kBAIPF,GAJO,2CAAH,qDAMfG,KACD,CAACb,IAwBJ,OACI,sBAAKc,UAAU,MAAf,UACI,6BAAKf,IAEL,qBAAKe,UAAU,cAAf,SACCX,EAAOY,KAAI,SAAAC,GAAK,OACb,qBAEAC,QAAS,kBAtBD,SAACD,GACbX,EACAC,EAAc,IAEdY,KAAkB,OAALF,QAAK,IAALA,OAAA,EAAAA,EAAOG,OAAQ,IAC3BC,MAAK,SAACC,GAEH,IAAMC,EAAY,IAAIC,gBAAgB,IAAIC,IAAIH,GAAKI,QACnDnB,EAAcgB,EAAUb,IAAI,SAE/BiB,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAYXG,CAAYd,IAC3BF,UAAS,qBAAgBb,GAAc,mBACvC8B,IAAG,UAjDH,wCAiDG,OAAe9B,EAAae,EAAMgB,YAAchB,EAAMiB,eACzDC,IAAKlB,EAAMG,MAJNH,EAAMmB,SAOd9B,GAAc,cAAC,IAAD,CAAS+B,QAAS/B,EAAYgC,KApCxC,CACTC,OAAQ,MACRC,MAAO,OACPC,WAAY,CACRC,SAAU,UC3BhBC,EAAU,mCAaDhC,EAXC,CACZiC,cAAc,8BAAD,OAAgCD,EAAhC,mBACbE,uBAAuB,wBAAD,OAA0BF,EAA1B,sBACtBG,cAAc,4BAAD,OAA8BH,EAA9B,mBACbI,kBAAkB,2BAAD,OAA6BJ,EAA7B,mBACjBK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,mBAAmB,2BAAD,OAA6BP,EAA7B,sBAClBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,oBC8BPS,G,MAnCA,WAAO,IAAD,EACSjD,mBAAS,IADlB,mBACVc,EADU,KACHoC,EADG,KAGjB7C,qBAAU,YACK,uCAAG,4BAAAC,EAAA,sEACSb,EAAMc,IAAIC,EAAQkC,wBAD3B,OACRS,EADQ,OAEdD,EAASC,EAAS1C,KAAKC,QAAQ0C,KAAKC,MAAMD,KAAKE,SAAWH,EAAS1C,KAAKC,QAAQ6C,OAAS,KAF3E,2CAAH,qDAIf5C,KACG,IAEHe,QAAQC,IAAIb,GAEZ,IAAmB0C,EAAKC,EAIxB,OACI,yBAAQ7C,UAAU,SAAS8C,MAAO,CAACC,eAAgB,QAASC,gBAAgB,4CAAD,cAA8C9C,QAA9C,IAA8CA,OAA9C,EAA8CA,EAAOiB,cAArD,MAAwE8B,mBAAoB,UAAvK,UACI,sBAAKjD,UAAU,kBAAf,UACI,oBAAIA,UAAU,eAAd,UAAmC,OAALE,QAAK,IAALA,OAAA,EAAAA,EAAOjB,SAAP,OAAgBiB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOG,QAAvB,OAA+BH,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOgD,iBACpE,sBAAKlD,UAAU,iBAAf,UACI,wBAAQA,UAAU,gBAAlB,kBACA,wBAAQA,UAAU,gBAAlB,wBAEJ,oBAAIA,UAAU,qBAAd,UAZO4C,EAaE,OAAC1C,QAAD,IAACA,OAAD,EAACA,EAAOiD,SAbLN,EAae,KAZzB,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKD,QAASE,EAAID,EAAIQ,OAAO,EAAGP,EAAE,GAAK,OAASD,QAgBnD,qBAAK5C,UAAU,2BCTZqD,G,MAvBH,WAAO,IAAD,EACajE,oBAAS,GADtB,mBACPkE,EADO,KACDC,EADC,KAcd,OAXA9D,qBAAU,WAMN,OALA+D,OAAOC,iBAAiB,UAAU,WAC1BD,OAAOE,QAAU,IACjBH,GAAW,GACTA,GAAW,MAEd,WACHC,OAAOG,oBAAoB,aAEhC,IAGC,sBAAK3D,UAAS,cAASsD,GAAQ,aAA/B,UACI,qBAAKtD,UAAU,WAAWiB,IAAI,0DAA0DG,IAAI,iBAE5F,mBAAGpB,UAAU,YAAY4D,KAAK,IAA9B,yBCGGC,MAjBf,WACE,OACE,sBAAK7D,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CAAKf,MAAM,qBAAqBC,SAAUU,EAAQkC,uBAAwB3C,YAAY,IACtF,cAAC,EAAD,CAAKF,MAAM,eAAeC,SAAUU,EAAQiC,gBAC5C,cAAC,EAAD,CAAK5C,MAAM,YAAYC,SAAUU,EAAQmC,gBACzC,cAAC,EAAD,CAAK9C,MAAM,gBAAgBC,SAAUU,EAAQoC,oBAC7C,cAAC,EAAD,CAAK/C,MAAM,aAAaC,SAAUU,EAAQqC,oBAC1C,cAAC,EAAD,CAAKhD,MAAM,aAAaC,SAAUU,EAAQsC,oBAC1C,cAAC,EAAD,CAAKjD,MAAM,cAAcC,SAAUU,EAAQuC,qBAC3C,cAAC,EAAD,CAAKlD,MAAM,gBAAgBC,SAAUU,EAAQwC,yBCPpC0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1D,MAAK,YAAkD,IAA/C2D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.92cdb570.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n//base url to make request to the movies database.\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useEffect, useState } from 'react';\r\nimport axios from './axios';\r\nimport \"./Row.css\";\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nconst Row = ({title, fetchUrl, isLargeRow}) => {\r\n    const [movies, SetMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n        //if [], run once when the row loads, and don't load again.\r\n        const fetchData = async () =>{\r\n            const request = await axios.get(fetchUrl);\r\n            // \"https://api.themoviedb.org/3/ discover/tv?api_key=${API_KEY}&with_networks=213`,\"\r\n            SetMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) =>{\r\n        if (trailerUrl){\r\n            setTrailerUrl('');\r\n        }else {\r\n            movieTrailer(movie?.name || \"\")\r\n            .then((url) =>{\r\n                // https://www.youtube.com/watch?v=durNwe9pL0E\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n            })\r\n            .catch((error) => console.log(error));\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n            {movies.map(movie => (\r\n                <img \r\n                key={movie.id} \r\n                onClick={() => handleClick(movie)}\r\n                className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                src={`${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path }`} \r\n                alt={movie.name} />\r\n            ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\nexport default Row;","const API_KEY = \"16ec5b2a7c4bc7a3248132c787767284\";\r\n\r\nconst request = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOrigionals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedymovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default request;","import React, { useEffect, useState } from 'react';\r\nimport axios from './axios';\r\nimport request from './request';\r\nimport './Banner.css';\r\n\r\nconst Banner = () => {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n    const fetchData = async () => {\r\n        const coverImg = await axios.get(request.fetchNetflixOrigionals);\r\n        setMovie(coverImg.data.results[Math.floor(Math.random() * coverImg.data.results.length - 1)]);\r\n    }\r\n    fetchData();\r\n    }, [])\r\n\r\n    console.log(movie);\r\n\r\n    const truncate = ((str, n) =>{\r\n        return str?.length > n ? str.substr(0, n-1) + \" ...\" : str  ;\r\n    });\r\n\r\n    return (\r\n        <header className=\"banner\" style={{backgroundSize: \"cover\", backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`, backgroundPosition: \"center\"}}>\r\n            <div className=\"banner_contents\">\r\n                <h1 className=\"banner_title\">{movie?.title || movie?.name || movie?.original_name}</h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner_description\">\r\n                {truncate(movie?.overview, 150)}\r\n                </h1>\r\n            </div>\r\n\r\n            <div className=\"banner_fadeBottom\" ></div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Nav.css';\r\n\r\nconst Nav = () => {\r\n    const [show, handleshow] = useState(false);\r\n\r\n    useEffect(() =>{\r\n        window.addEventListener(\"scroll\", () =>{\r\n            if (window.scrollY > 100){\r\n                handleshow(true);\r\n            }else handleshow(false);\r\n        });\r\n        return ()=>{\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img className=\"nav_logo\" src=\"https://www.freepnglogos.com/uploads/netflix-logo-0.png\" alt=\"Netflix Logo\" />\r\n\r\n            <a className=\"nav_avtar\" href=\"#\">Login </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport request from './request';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n      <Row title=\"NETFLIX ORIGIONALS\" fetchUrl={request.fetchNetflixOrigionals} isLargeRow={true}/>\n      <Row title=\"Trending Now\" fetchUrl={request.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={request.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={request.fetchActionMovies} />\n      <Row title=\"Comedy Now\" fetchUrl={request.fetchComedymovies} />\n      <Row title=\"Horror Now\" fetchUrl={request.fetchHorrorMovies} />\n      <Row title=\"Romance Now\" fetchUrl={request.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={request.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}